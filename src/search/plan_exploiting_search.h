#ifndef PLAN_EXPLOITING_SEARCH_H
#define PLAN_EXPLOITING_SEARCH_H

#include "search_engine.h"
#include "search_space.h"

#include "open_lists/open_list.h"

#include <vector>

class GlobalOperator;
class PlanExtractableHeuristic;
class Options;
class ScalarEvaluator;

class PlanExploitingSearch : public SearchEngine {
    const bool reopen_closed_nodes;
    const bool use_multi_path_dependence;

    OpenList<StateID> *open_list;

    std::vector<PlanExtractableHeuristic *> heuristics;

    std::pair<SearchNode, bool> fetch_next_node();
    void reward_progress();
    void print_checkpoint_line(int g) const;

    int num_replans;

protected:
    virtual void initialize() override;
    virtual SearchStatus step() override;

public:
    explicit PlanExploitingSearch(const Options &opts);
    virtual ~PlanExploitingSearch() = default;

    virtual void print_statistics() const override;

    void dump_search_space() const;
};

#endif
